<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGiratina</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

introAnimation = true;

cover = true;

ed = false;
r = 0;

uTime = shader_get_uniform(shFBTrans, "u_time");
uTex = shader_get_sampler_index(shFBTrans, "u_tex");

alpha = 1;
loseHP = 0;

winPosX = window_get_x();
winPosY = window_get_y();

image_xscale = 6;
image_yscale = 6;

xScale = image_xscale;
yScale = image_yscale;

yell[0] = false;
yell[1] = false;
yell[2] = false;
yell[3] = false;

attackTimer = 0;
createCounter = false;
rollTimes = 0;

null = false;

hp = 100;//100

if(global.fb) {
    instance_create(0, 0, oStartFB);
    cover = false;
    alpha = 0;
    introAnimation = false;
    instance_create(0, 0, oBlackMist);
    oBlackMist.ed = true;
    audio_play_sound(sndGiratinaCry2, 100, false);
}

toX = x;
toY = y;

//0 is idle
//1 is pre-attack
//2 is normal-attack
//3 is speical-attack
//4 is hurt
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = lerp(alpha, cover, .02);
loseHP = lerp(loseHP, 0, .1);
image_xscale = lerp(image_xscale, xScale, .01);
image_yscale = lerp(image_yscale, yScale, .01);
r = lerp(r, ed*800, .005);
if(r &gt;= 700) {
    room_goto(rmED);
}
if(hp &gt; 0) {
    window_set_position(winPosX + cos(current_time/200)*((100 - hp)/10), winPosY + sin(current_time/200)*((100 - hp)/10));
} else {
    window_set_position(winPosX, winPosY);
}   

if(introAnimation) {
    speed = .25;
    direction = 270;
    if(y &gt;= 240) {
        speed = 0;
        cover = false;
        if(alpha &lt;= 0.05) {
            audio_stop_all()
            audio_play_sound(sndGiratinaCry, 100, false);
            image_index = 1;
            alarm[0] = 20;
            oBlackMist.ed = true;
            introAnimation = false;
        }
    }
}

//ATTACK!
if(!introAnimation &amp;&amp; !audio_is_playing(sndGiratinaCry) &amp;&amp; instance_exists(objPlayer)) {
    global.fb = true;

    if(hp &gt;= 80 &amp;&amp; hp &lt;= 100) {
    
        toX = x;
        toY = y;
    
        attackTimer++;
        
        if(attackTimer &gt;= 40) {
            var placeHolder = irandom(2);
            var ins = instance_create(choose(-80, room_width + 80), 320 + placeHolder * 64, oIsaac);
            ins.direction = !(objPlayer.x &gt; ins.x)*180;
            ins.image_xscale = !(objPlayer.x &gt; ins.x)*-2 + 1;
            attackTimer = 0;
        }
        
        if(loseHP &lt;= 0.05) {
            image_index = 0;
        } else {
            image_index = 4;
        }
        
        image_angle = sin(current_time/1000)*10;
        
        if(!audio_is_playing(musGiratina)) {
            audio_play_sound(musGiratina, 2000, true);
        }
    
    }
    
    if(hp &gt;= 60 &amp;&amp; hp &lt; 80) {
    
        if(!yell[0]) {
            audio_play_sound(sndGiratinaCry2, 100, false);
            yell[0] = true;
        }
    
        image_angle = 0;
    
        x = lerp(x, toX, .1);
        y = lerp(y, toY, .1);
        
        if(image_xscale &gt;= 5.2) {
            cover = true;
            null = true;
            image_speed = 1;
            xScale = 5;
            yScale = 5;
        }else {
            image_speed = 0;
            attackTimer++;
            if(attackTimer &lt;= 110 - (80 - hp)*3){
                image_index = 0;
            } else if(attackTimer &gt; 110 - (80 - hp)*3 &amp;&amp; attackTimer &lt;= 110 - (80 - hp)*3 + 15) {
                image_index = 1;
            } else if(attackTimer &gt; 110 - (80 - hp)*3 + 15 &amp;&amp; attackTimer &lt;= 110 - (80 - hp)*3 + 30) {
                image_index = 2;
                if(!createCounter) {
                    audio_play_sound(sndGiratinaCry2, 100, false);
                    //audio_play_sound(sndDA, 100, false);
                    audio_play_sound(sndAAAA, 101, false);
                    audio_play_sound(sndHurt, 100, false);
                    hp -= 1;
                    loseHP = 1;
                    var inss = instance_create(x, y, oDA);;
                    inss.direction = point_direction(inss.x, inss.y, objPlayer.x, objPlayer.y);
                    for(var dir = 0; dir &lt;= 360; dir += 60) {
                        var ins = instance_create(x, y, oDA);;
                        ins.direction = dir;
                    }
                    createCounter = true;
                }
            } else {
                toX = irandom(room_width);
                toY = irandom(room_height);
                createCounter = false;
                attackTimer = 0;
            }
            
            cover = false;
        }
        
        
    }
    
    if(hp &gt;= 40 &amp;&amp; hp &lt; 60) {
        if(!yell[1]) {
            audio_play_sound(sndGiratinaCry2, 100, false);
            yell[1] = true;
            oBlackMist.ed = false;
        }
        
        x = lerp(x, toX, .1);
        y = lerp(y, toY, .1);
        
        if(image_xscale &gt;= 4.2) {
            cover = true;
            null = true;
            image_speed = 1;
            xScale = 4;
            yScale = 4;
        } else { 
            cover = false;
            image_speed = 0;
            attackTimer++;
            var base = 85 - (60 - hp)*3;
            if(attackTimer &lt;= base) {
                image_index = 0;
            } else if(attackTimer &gt; base &amp;&amp; attackTimer &lt;= base + 15) {
                image_index = 1;
            } else if(attackTimer &gt; base + 15 &amp;&amp; attackTimer &lt;= base + 30) {
                image_index = 2;
                if(!createCounter) {
                    audio_play_sound(sndGiratinaCry2, 100, false);
                    audio_play_sound(sndHurt, 100, false);
                    hp -= 1;
                    loseHP = 1;
                    for(var dir = 0; dir &lt;= 360; dir += 120) {
                        var ins = instance_create(x + lengthdir_x(60, dir), y + lengthdir_y(60, dir), oNotes);;
                        ins.direction = dir;
                        ins.image_angle = dir;
                    }
                    createCounter = true;
                }
            } else {
                    toX = objPlayer.x;
                    toY = objPlayer.y;
                    createCounter = false;
                    attackTimer = 0;
                }
        }
        
    }
    
    if(hp &gt;= 20 &amp;&amp; hp &lt; 40) {
        if(!yell[2]) {
            audio_play_sound(sndGiratinaCry2, 100, false);
            yell[2] = true;
            oBlackMist.ed = true;
        }
        
        x = lerp(x, toX, .1);
        y = lerp(y, toY, .1);
        
        if(image_xscale &gt;= 3.2) {
            cover = true;
            null = false;
            image_speed = 1;
            xScale = 3;
            yScale = 3;
        } else {
            if(loseHP &lt;= 0.05) {
                image_index = 0;
            } else {
                image_index = 4;
            }
            image_speed = 0;
            cover = false;
            attackTimer++;
            x += random_range(-4, 4);
            y += random_range(-4, 4);
            if(attackTimer &gt;= 37) {
                attackTimer = 0;
                toX = objPlayer.x;
                toY = objPlayer.y;
                audio_play_sound(sndDragonClaw, 100, false);
                instance_create(x, y, oDragonClaw);
            }
        }
        
    }
    
    if(hp &lt; 20 &amp;&amp; hp &gt; 0) {
    
        if(!yell[3]) {
            audio_play_sound(sndGiratinaCry2, 100, false);
            yell[3] = true;
        }
        
        image_angle = sin(current_time/1000)*10;
        
        x = lerp(x, room_width/2, .1);
        y = lerp(y, 240, .1);
        
        if(image_xscale &lt;= 5.8) {
            cover = true;
            xScale = 6;
            yScale = 6;
            image_speed = 1;
        } else {
            if(loseHP &lt;= 0.05) {
                image_index = 0;
            } else {
                image_index = 4;
            }
            image_speed = 0;
            cover = false;
            attackTimer++;
            if(hp &lt;= 10) {
                for(var j = 0; j &lt;= 160; j += 40) {
                    if(attackTimer == j) {
                        ins = instance_create(x, y, oDA);
                        ins.direction = point_direction(x, y, objPlayer.x, objPlayer.y);
                        audio_play_sound(sndAAAA, 100, false);
                        //audio_play_sound(sndGiratinaCry2, 101, false);
                    }
                }
            }
            for(var i = 0; i &lt;= 90; i += 5) {
                if(attackTimer == 60 + i) {
                    instance_create(x, y, oLaserEmit);
                }
            }
            if(attackTimer &gt;= 160) {
                attackTimer = 0;
            }
        }
        
    }
    
    if(hp &lt; 0) {
        attackTimer++;
        
        if(audio_is_playing(musGiratina)) {
            audio_stop_sound(musGiratina);
        }
        
        if(attackTimer &gt;= 30 &amp;&amp; rollTimes &lt;= 8) {
            image_angle = random_range(-45, 45);
            audio_play_sound(sndGiratinaCry2, 100, false);
            attackTimer = 0;
            rollTimes++;
        }
        
        if(rollTimes &gt; 8) {
            ed = true;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(loseHP &lt;= 0.05 &amp;&amp; alpha &lt;= 0.25 &amp;&amp; !null) {
    with(other) {
        instance_destroy();
    }
    audio_play_sound(sndHurt, 100, false);
    hp -= 0.5;
    loseHP = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_circle_colour(x, y, r, c_black, c_black, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sprite_index, -1, x, y, image_xscale, image_yscale, image_angle, c_white, 1 - null*0.5);

shader_set(shFBTrans);
shader_set_uniform_f(uTime, current_time/1000);
texture_set_stage(uTex, sprite_get_texture(sTexture, -1));
draw_sprite_ext(sprite_index, -1, x, y, image_xscale, image_yscale, image_angle, c_white, alpha);
shader_reset();

shader_set(shLoseHP);
draw_sprite_ext(sprite_index, -1, x, y, image_xscale, image_yscale, image_angle, c_white, loseHP);
shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
