<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(room_width, room_height);

for(i = 0; i &lt;= room_width div 32; i++){
    for(j = 0; j &lt;= room_height div 32; j++){
        ascii[i, j] = -2;//0 block, 1 player, 2 up needle, 3 down needle, 4 downstairs, 5 water
    }
}
px = -1;
py = -1;
if(instance_exists(objPlayer)){
    px = objPlayer.x div 32;
    py = objPlayer.y div 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(surf)){
    surf = surface_create(room_width, room_height);
}

if(instance_exists(objPlayer)){
    px = objPlayer.x div 32;
    py = objPlayer.y div 32;
}

surface_set_target(surf);
draw_clear(c_black);
//ASCII
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fontAscii);
for(var i = 0; i &lt;= room_width div 32; i++){
    for(var j = 0; j &lt;= room_height div 32; j++){
        ascii[i, j] = -2;//0 block, 1 player, 2 up needle, 3 down needle, 4 downstairs
    }
}
with(objBlock){
    //visible = true;
    //draw_text((x div 32) * 32, (y div 32) * 32, "#");
    //oAscii.ascii[x div 32, y div 32] = 0;
    if(!collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32 + 15, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 + 32, objBlock, 1, 1)){
        oAscii.ascii[x div 32, y div 32] = 0;
    }
}
with(objWarp){
    if(!collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 - 1, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 + 32, objBlock, 1, 1)){
        oAscii.ascii[x div 32, y div 32] = 4;
    }
}

with(objSpikeUp){
    if(!collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 - 1, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 + 32, objBlock, 1, 1)){
        oAscii.ascii[x div 32, y div 32] = 2;
    }
}

with(objSpikeDown){
    if(!collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 - 1, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 + 32, objBlock, 1, 1)){
        oAscii.ascii[x div 32, y div 32] = 3;
    }
}

with(objWater){
    if(!collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 - 1, objBlock, 1, 1) || !collision_line(x + 16, y + 16, oAscii.px * 32, oAscii.py * 32 + 32, objBlock, 1, 1)){
        oAscii.ascii[x div 32, y div 32] = 5;
    }
}
with(objPlayer){
    //draw_text((x div 32) * 32, (y div 32) * 32, "@");
    oAscii.ascii[oAscii.px, oAscii.py] = 1;
    //oAscii.show[x div 32, y div 32] = 1;
}
/*for(var i = 0; i &lt;= room_width div 32; i++){
    for(var j = 0; j &lt;= room_height div 32; j++){
        coll = collision_rectangle(i, j, i + 32, j+ 32, objBlock, 0, 0) || 
        collision_rectangle(i, j, i + 32, j + 32, objPlayer, 0, 0);
        if(!coll){
            draw_text((i div 32)*32, (j div 32)*32, ".");
        }
    }
}*/
for(var ii = 0; ii &lt;= room_width div 32; ii++){
    for(var jj = 0; jj &lt;= room_height div 32; jj++){
        if(collision_line(ii*32 + 16, jj*32 + 16, oAscii.px * 32, oAscii.py * 32, objBlock, 1, 1)){
            draw_set_colour(c_white);
            }else{
            draw_set_colour(c_white);
            if(ascii[ii, jj] &lt; 1){
                ascii[ii, jj] = -1;
            }
        }
        switch(ascii[ii, jj]){
            case -1: draw_text(ii * 32 + 16, jj * 32 + 16 - 10, ".");break;
            case 2: draw_text(ii * 32 + 16, jj * 32 + 16, '^');break;
            case 3: draw_text(ii * 32 + 16, jj * 32 + 16, 'v');break;
            case 4: draw_text(ii * 32 + 16, jj * 32 + 16, '&gt;');break;
            //case 1: draw_text(ii * 32 + 16, jj * 32 + 16, "@");break;
        }
        if(ascii[ii, jj] = 0){
            draw_set_colour(c_white);
            draw_text(ii * 32 + 16, jj * 32 + 16, "\#");
            //ascii[ii, jj] = -1;
        }
        if(ascii[ii, jj] = 5){
            draw_set_colour(c_blue);
            draw_text(ii * 32 + 16, jj * 32 + 16, "~");
            //ascii[ii, jj] = -1;
        }
        if(ascii[ii, jj] = 1){
            draw_set_colour(c_white);
            draw_text(ii * 32 + 16, jj * 32 + 16, "@");
            //ascii[ii, jj] = -1;
        }
    }   
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(room = rmAscii1){
    draw_set_font(fontShowing);
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(0, 0, "You can holding your mouse to check up ASCII tiles.");
//}

//Using mouse to check up what the stuff is it
var mgx = mouse_x div 32;
var mgy = mouse_y div 32;
if(mouse_check_button(mb_left)){
    if(mouse_x &gt; 0 &amp;&amp; mouse_x &lt; room_width){
        if(mouse_y &gt; 0 &amp;&amp; mouse_y &lt; room_height){
        draw_set_color(c_white);
        //Drawing
        draw_rectangle_colour(mgx * 32, mgy * 32, mgx * 32 + 32, mgy *32 + 32, c_white, c_white, c_white, c_white, true);
        draw_rectangle_colour(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, mgx * 32 - (mouse_x div (room_width/2))*128 + 128 + 16 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 64 + 16, c_black, c_black, c_black, c_black, false);
        draw_rectangle_colour(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, mgx * 32 - (mouse_x div (room_width/2))*128 + 128 + 16 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 64 + 16, c_white, c_white, c_white, c_white, true);
        
        //Text
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_font(fontShowing);
        switch(ascii[mgx, mgy]){
            case -2: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "Unknown.");break;
            case -1: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "Empty.");break;
            case 0: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "A block.");break;
            case 1: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "You, a kid.");break;
            case 2: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "A spike.");break;
            case 3: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "A spike.");break;
            case 4: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "Stair leading
downwards");break;
            case 5: draw_text(mgx * 32 - (mouse_x div (room_width/2))*128 + 16 + 32 - 32*(mouse_x &gt;= room_width/2), mgy * 32 - (mouse_y div (room_height/2))*64 + 16, "Water.");break;
        }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(surf, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
